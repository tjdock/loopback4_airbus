1.安装CLI
>npm install -g @loopback/cli

>lb4 -v
@loopback/* dependencies:
  - @loopback/authentication: ^2.1.2
  - @loopback/boot: ^1.4.1
  - @loopback/build: ^2.0.0
  - @loopback/context: ^1.19.1
  - @loopback/core: ^1.8.2
  - @loopback/metadata: ^1.2.2
  - @loopback/openapi-spec-builder: ^1.2.2
  - @loopback/openapi-v3-types: ^1.1.2
  - @loopback/openapi-v3: ^1.6.2
  - @loopback/repository-json-schema: ^1.7.0
  - @loopback/repository: ^1.7.0
  - @loopback/rest: ^1.16.0
  - @loopback/testlab: ^1.6.0
  - @loopback/docs: ^1.23.0
  - @loopback/example-hello-world: ^1.2.2
  - @loopback/example-log-extension: ^1.2.2
  - @loopback/example-rpc-server: ^1.2.2
  - @loopback/example-todo: ^1.6.2
  - @loopback/example-soap-calculator: ^1.6.3
  - @loopback/service-proxy: ^1.2.2
  - @loopback/http-caching-proxy: ^1.1.2
  - @loopback/http-server: ^1.4.1
  - @loopback/example-todo-list: ^1.7.2
  - @loopback/dist-util: ^0.4.0
  - @loopback/rest-explorer: ^1.2.2
  - @loopback/eslint-config: ^1.1.2
  - @loopback/example-express-composition: ^1.4.2
  - @loopback/example-greeter-extension: ^1.3.2
  - @loopback/booter-lb3app: ^1.2.2
  - @loopback/example-lb3-application: ^1.1.2
  - @loopback/example-greeting-app: ^1.1.2
  - @loopback/example-context: ^1.2.2

安装验证服务
>npm install --save @loopback/authentication
>npm install --save bcryptjs
>npm install --save-dev @types/bcryptjs
>npm install --save jsonwebtoken @types/jsonwebtoken

2.创建项目
>lb4 app
[?] Project name: getting-started
[?] Project description: Getting started tutorial
[?] Project root directory: (getting-started)
[?] Application class name: StarterApplication
[?] Select project build settings: Enable tslint, Enable prettier, Enable loopbackBuild, Enable repositories, Enable services

3.启动项目
>npm i nodemon --save-dev
创建nodemon.json
package.json中
"scripts": {
    "dev": "nodemon",
}
>npm run dev
index.js可以修改端口


****************** 创建Model ******************
>lb4 model
? Model class name: Dic
? Please select the model base class: Entity
? Allow additional (free-form) properties? No

? Enter the property name: DicID
? Property type: number
? Is id the ID property? Yes
? Is it required?: No
? Default value [leave blank for none]:
注意：ID为主键的话，required为false

? Enter the property name: DicType
? Property type: string
? Is it required?: Yes
? Default value [leave blank for none]:

? Enter the property name: DicValue
? Property type: string
? Is it required?: Yes
? Default value [leave blank for none]:


****************** 创建datasource ******************
>lb4 datasource
? Datasource name: db
? Select the connector for db: In-memory db (supported by StrongLoop)
? window.localStorage key to use for persistence (browser only):
? Full path to file for persistence (server only): ./data/db.json
在根目录创建data文件夹，里面创建db.json文件


****************** 创建repository ******************
>lb4 repository
? Please select the datasource DbDatasource
? Select the model(s) you want to generate a repository Dic
? Please select the repository base class DefaultCrudRepository (Legacy juggler bridge)


****************** 创建controller ******************
>lb4 controller
? Controller class name: Dic
? What kind of controller would you like to generate? REST Controller with CRUD functions
? What is the name of the model to use with this CRUD repository? Dic
? What is the name of your CRUD repository? DicRepository
? What is the type of your ID? number
? What is the base HTTP path name of the CRUD operations? /dics


patch，put，post区别
patch只是局部更新，
put是整个更新，
post是添加新内容


//调用API参考
https://loopback.io/doc/en/lb4/todo-tutorial-geocoding-service.html
https://loopback.io/doc/en/lb3/REST-connector.html